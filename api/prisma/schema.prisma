generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE { 
  USER
  LAWYER
  ADMIN
}

enum CHAT_ROLE { 
  OWNER
  ADMIN
  MEMBER
}

enum COMMITMENT_STATUS {
  PENDING
  COMPLETED
  CANCELLED
}


model User { 
  id String @id @default(cuid())
  email String @unique 
  name String
  password String
  role ROLE @default(USER)
  lawyer_registration String? @unique
  message Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commitment_user Commitment[] @relation("commitment_user")
  commitment_client Commitment[] @relation("commitment_client")
  chat_user ChatUser[]
  user_token ResetPasswordToken[]
  profilePicture String
}

model Message { 
  id String @id @default(cuid())

  chat Chat @relation(fields: [chat_id], references: [id])
  chat_id String

  sender User @relation(fields: [sender_id], references: [id])
  sender_id String

  content String
  files String[]
  hash String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reads     MessageRead[]
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message   Message @relation(fields: [messageId], references: [id])

  @@unique([messageId, userId])
}


model Chat { 
  id String @id @default(cuid())

  isGroup Boolean @default(false)
  onlyAdmin Boolean? @default(false)
  name String? 
  messages Message[]
  users ChatUser[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatUser{ 
  id String @id @default(cuid())

  user User @relation(fields: [user_id], references: [id])
  user_id String
  user_name String
  user_profile_picture String

  chat Chat @relation(fields: [chat_id], references: [id])
  chat_id String

  role CHAT_ROLE @default(MEMBER)
  joinedAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@unique([chat_id, user_id])
}


model ResetPasswordToken{ 
  id Int @id @unique @default(autoincrement())
  token String @unique

  user User @relation(fields: [user_id], references: [id]) 
  user_id String 

  createdAt DateTime @default(now())
  expiresAt DateTime

  used Boolean @default(false)
}

model Commitment{ 
  id String @id @default(cuid())
  user User @relation("commitment_user", fields: [user_id], references: [id])
  user_id String

  client User @relation("commitment_client", fields: [client_id], references: [id])
  client_name String
  client_id String

  title String 
  dueDate DateTime
  status COMMITMENT_STATUS @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}